@model project.Models.UserModel;
@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_LayoutMainPageLog.cshtml";
}
<style>
    body{
        font-family:'Century Gothic';
    }
    .header{
        display:flex;
        justify-content:space-between;
        align-items:center;
    }
    .header span{
        font-family:'Century Gothic';
        display:block;
    }
    .spanOne{
        font-size: 28px;
        font-family:Broadway;
        font-weight:400;
    }
    #firstHr{
        margin-top:-0.1em;
    }
    .item{
        display:flex;
        justify-content:space-between;
        align-items:center;
        margin-bottom:1em;
    }

    .content{
        margin:0 auto;
        width:75%;
    }
    input{
        border: 0 solid black;
    }
    .input-vis{
        border: 1px solid black;
    }
    .form{
        display:flex;
        right:0;
    }
    .btn{
        border: 0 solid black;  
    }
    .Adress{
        display:flex;
        justify-content:space-between;
        margin-bottom: 1em;
        margin-top:4em;
        align-items:center;
    }
    .Adress span{
        display:block;
        font-family:'Century Gothic';
        font-size:28px;
    }
    .Adress a{
        color:black;
        font-family:'Century Gothic';
    }
    .Adress a:hover{
        color:purple;
    }
    .spanTwo{
        display:flex;
    }
    .spanTwo button{
        margin-left:1em;
    }
    .image{
        display:flex;
        margin-left:1em;
    }
    .spanTwo img{
        width:2vw;
    }
    .image button{
    }
    .Money{
        font-family:'Century Gothic';
        position:fixed;
        right:6vw;
        display:inline-block;
    }
    .Money span{
        display:block;
        text-align:right;
        margin-right:1em;
    }
    .menu-dropdown{

    }
.menu-dropbtn {
    position:fixed;
    top:11.4vh;
    left:0;
    padding-left:0.7em;
    color: #7C45C5;
    border: solid 1px #7C45C5; 
    font-family: 'ArchiveRegular';
    font-style: normal;
    font-weight: normal;
    font-size: 22px;
    line-height: 25px;
    letter-spacing: 0.1em;
}
.menu-dropdown{
    position: relative;
    display: inline-block;
}

.menu-dropdown-content 
{
    display: none;
    position: fixed;
    top:12vh;
    left:3vw;
    min-width: 168px;
    box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
    z-index: 1;
}

    .menu-dropdown-content a 
    {
        color: black;
        padding: 12px 16px;
        text-decoration: none;
        display: block;
        background: rgba(236, 217, 251, 0.89);
        color: #696172;
        font-family: 'Century Gothic';
        font-size: 22px;
    }

.menu-dropdown-content a:hover {
    background: rgba(236, 255, 251, 0.89);
}

.menu-dropdown:hover .menu-dropdown-content {

    display: block;
}

.menu-dropdown:hover .menu-dropbtn {
    background-color:#7C45C5;
    color: white;
}
        .name-page{
        background-color: #7C45C5;
        width:26vw;
        padding-top:0.5em;
        padding-bottom:0.5em;
        position:fixed;
        top:5.7vh;
        left:0;
        z-index:10000;
    }
    .name-page span{
        display:block;
        text-align:center;
        font-family:Archive;
        color:white;
        font-size:1.75rem;
    }
</style>
<div class="name-page">
    <span>Пользовательские данные</span>
</div>
 <div class="menu-dropdown">
    <button class="menu-dropbtn btn">➤</button>
    <div class="menu-dropdown-content">
        <a href="#Account">Данныые пользователя</a>
        <a href="#Adress">Адрес</a>
        <a href="#BankDetails">Банковские реквизиты</a>
        <a href="#CreditDetails">Банковская карта</a>
    </div>
</div>
<div class="Money">
    <span>
        @{
            @String.Format("{0:C}", @Model.Money);
        }
    </span>
    <a asp-action="AddCash" class="btn btn-outline-success">Пополнить счет</a>
</div>
<div class="content">
    <a name="Account"></a> 
    <div class="header">
        <span class="spanOne">Account</span>
        <div class="spanTwo">
            <span>@Model.Login</span>
            @{
                if (@Model.FilePath == null)
                {
                    <form asp-action="EditPhoto">
                        <button type="submit" class="btn edit btn-secondary">Добавить фото</button>
                    </form>
                }
                else
                {
                    <div class="image">
                        <img src=@Model.FilePath class="img-fluid">
                        <form asp-action="EditPhoto">
                            <button type="submit" class="btn edit btn-outline-secondary">✎</button>
                        </form>
                    </div>
                }
            }
        </div>
    </div>
<hr id="firstHr"/>
    <div class="item">
        <span>Логин</span>
            <form id="login" asp-action="EditLogin" asp-controller="User" method='post'>
                <input type="text" asp-for="Login" value="@Model.Login" readonly />
                <button type="button" class="btn edit btn-outline-secondary" onclick="editNode('login')">✎</button>
                <span asp-validation-for="Login"></span>
            </form>
    </div>
    <div class="item">
        <span>Пароль</span>
            <form id="password" asp-action="EditPassword" asp-controller="User" method='post'>
                <input type="password" asp-for="Password" value="@Model.Password" readonly />
                <button type="button" class="btn edit btn-outline-secondary" onclick="editNode('password')">✎</button>
                <span asp-validation-for="Password"></span>
            </form>
    </div>
    @{await Html.RenderPartialAsync("_EditPerson", new project.Models.Person.PersonModel(){Name = Model.PersonModel.Name, Sername = Model.PersonModel.Sername, Patronymic = Model.PersonModel.Patronymic,
                                                                            Phone = Model.PersonModel.Phone, Email = Model.PersonModel.Email});} 
    <hr />
<a name="Adress"></a>
    @{
        if (Model.PersonModel.AdressModelID == null)
        {
            <div class="Adress">
            <span>Address</span>
            <a asp-action="AddAdress" asp-controller="Adress">Добавить</a>  
            </div>
        }
        else
        {
            await Html.RenderPartialAsync("_AddAdress", new project.Models.Adress.AdressModel()
            {
                Country = Model.PersonModel.Adress.Country, 
                City = Model.PersonModel.Adress.City, 
                Street = Model.PersonModel.Adress.Street, 
                PostIndex = Model.PersonModel.Adress.PostIndex
            });
        }
    }
            <hr />
<a name="BankDetails"></a>
    @{
        if (Model.PersonModel.RecipientDetailsModelId == null)
        {
            <div class="Adress">
                <span>Bank details</span>
                <a asp-action="AddDetails" asp-controller="RecipientDetails">Добавить</a>  
            </div>
        }
        else
        {
            await Html.RenderPartialAsync("_AddBankDetails", new project.Models.Person.RecipientDetailsModel()
                {
                    Name = Model.PersonModel.RecipientDetailsModels.Name,
                    INN = Model.PersonModel.RecipientDetailsModels.INN,
                    KPP = Model.PersonModel.RecipientDetailsModels.KPP,
                    AccountNumber = Model.PersonModel.RecipientDetailsModels.AccountNumber,
                    BIK = Model.PersonModel.RecipientDetailsModels.BIK,
                    CorrespondentAccount = Model.PersonModel.RecipientDetailsModels.CorrespondentAccount
                });
        }
    }

            <hr />
<a name="CreditDetails"></a>
    @{
        if(Model.PersonModel.SenderDetailsModelId == null)
        {
            <div class="Adress">
                <span>Credit details</span>
                <a asp-action="AddDetails" asp-controller="SenderDetails">Добавить</a>
            </div>
        }
        else
        {
            await Html.RenderPartialAsync("_AddCreditDetails", new project.Models.Person.SenderDetailsModel()
            {
                Name = Model.PersonModel.SenderDetails.Name,
                Sername = Model.PersonModel.SenderDetails.Sername,
                NumberCart = Model.PersonModel.SenderDetails.NumberCart,
                CVC = Model.PersonModel.SenderDetails.CVC,
                dateTime = Model.PersonModel.SenderDetails.dateTime
            }
            );
        }
    }
        <hr />
</div>
<script>
    function editNode(name){
        debugger
        let element = document.getElementById(name);
        if(element.childNodes[3].innerHTML == "✎")
        {
            element.childNodes[3].attributes[0].nodeValue = "button";
            element.childNodes[3].innerHTML = "✓"
            element.childNodes[1].removeAttribute("readonly");
            element.childNodes[1].classList.add("input-vis");
            if(name == 'password')
                 element.childNodes[1].defaultValue = "";
            return;
        }
        if(element.childNodes[3].innerHTML == "✓")
        {
            element.childNodes[3].attributes[0].nodeValue = "submit";
            element.childNodes[3].innerHTML = "✎"
            element.childNodes[1].addAttribute("readonly");
            element.childNodes[1].classList.remove("input-vis");
            return;
        }
    }
</script>
